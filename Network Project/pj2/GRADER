                                     GRADER

Name of student running submit: Nick Helvig
Login of student running submit: cs61b-yl

Second team member's name: Prithviraj Pandian
Second team member's login: cs61b-cg

Third team member's name (if any):
Third team member's login:

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the machines in the Soda CS 61B lab?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.


We will use a class called GameBoard that will contain all the methods pertaining to the board itself, as well as
contain the gameboard information in an int [][] array of 8 by 8. A 1 will represent a black piece in that position, a 2
will represent a white piece, and a 0 will represent no piece at all.


Check Move Module:
/*** Implemented by Prithvi
Method checks whether a move passed in as a parameter is legal for the given player. 
Returns true if move is legal, false if not. Method will be in the GameBoard Class
*/
public boolean isValid (Move move, int player);


Evaluation Module:
/*** Implemented by Prithvi
This method will be in the GameBoard class, and given a Gameboard "this" and which player it is evaluating for (1
if the current player is black, 2 if the current player is white),
it will return an integer value between negative and positive infinity. Negative values indicate that the
opponent is currently winning for the board, and positive values indicate that the player is winning for
for the given board.  It will call the method network in  the determine network module in order to find out if a player has a network or not. If a player has a network, it will return a value of 10000 minus a penalty for the number of
chips on the board. The penalty will ensure that a board which has a quicker win is rated higher than a board with
a win and many pieces. 
*/
public double evaluateBoard (int player);

MiniMax module:
/*** Implemented by Prithvi
This method will be in the GameBoard class, and given a GameBoard "this" and which player it is evaluating for
(1 if the player is black, 2 if the player is white), it will return the best possible move in the current circumstance
within the chosen search depth. The method will utilize many calls to method evaluateBoard in the Evaluation module
to pick the best possible move. The method will also need to call the method network in the network identifier module.
The method will be an implementation of the minimax search algorithm with alpha beta pruning. 
*/

public Move returnBest (int player, int searchdepth, int alpha, int beta);


/***Implemented by Nick
validMoves generates a list of all possible moves by going through each space of
the internal game board and checking whether or not that space is a valid space 
to play a piece. If it is, it is added to the Move[]. If it is not a valid move,
nothing happens. 
validMoves takes no parameters
returns an array of valid moves */
protected Move[] validMoves();

/**Implemented by Nick
       network() evaluates a board and check's each chips list of connections to see if 
       there is a Network of 6 or more chips. Uses an array to make sure that the same chip is not 
       called more than once. Also keeps track of the direction of the chip so that two chips in a
       line are not allowed to be in the same network. Makes sure the beginning and ending chips are
       in the goal areas using inGoal().
       @param color              the color of the player searching for a network
       @param x                  x-coordinate of the current chip 
                                 (used in recursive calls, default call will be 0)
       @param y                  y-coordinate of the current chip 
                                 (used in recursive calls, default call will be 0)
       @param checked            the list of previously used chips 
                                 (used in recursive calls, default call will be null)
       @param total              length of the current network, default is 0
       @param directionFrom      during the function call, direction from is the index position of the 
                                 list of connected chips. Because each element in the array of connected 
                                 chips corresponds to a certain direction, this allows future calls to not 
                                 need to search in that direction.
       @returns                  true if there is a Network for the given player
                                 false if there are no valid Networks 
       */

public boolean containsNetwork (int color, int x, int y, int[][] checked, int total, int directionFrom) {
  
}



